namespace HumJ.Utilities
{
    public static class Bit
    {
        /// <summary>
        /// 倒转 Byte 的高低位
        /// </summary>
        public static unsafe byte Bit_Reverse(this byte n)
        {
            n = (byte)(((n & 0b11110000) >> 4) | ((n & 0b00001111) << 4));
            n = (byte)(((n & 0b11001100) >> 2) | ((n & 0b00110011) << 2));
            n = (byte)(((n & 0b10101010) >> 1) | ((n & 0b01010101) << 1));
            return n;
        }

        /// <summary>
        /// 倒转 UInt16 的高低位
        /// </summary>
        public static unsafe ushort Bit_Reverse(this ushort n)
        {
            n = (ushort)(((n & 0b1111111100000000) >> 8) | ((n & 0b0000000011111111) << 8));
            n = (ushort)(((n & 0b1111000011110000) >> 4) | ((n & 0b0000111100001111) << 4));
            n = (ushort)(((n & 0b1100110011001100) >> 2) | ((n & 0b0011001100110011) << 2));
            n = (ushort)(((n & 0b1010101010101010) >> 1) | ((n & 0b0101010101010101) << 1));
            return n;
        }

        /// <summary>
        /// 倒转 UInt32 的高低位
        /// </summary>
        public static unsafe uint Bit_Reverse(this uint n)
        {
            n = ((n & 0b11111111111111110000000000000000) >> 16) | ((n & 0b00000000000000001111111111111111) << 16);
            n = ((n & 0b11111111000000001111111100000000) >> 08) | ((n & 0b00000000111111110000000011111111) << 08);
            n = ((n & 0b11110000111100001111000011110000) >> 04) | ((n & 0b00001111000011110000111100001111) << 04);
            n = ((n & 0b11001100110011001100110011001100) >> 02) | ((n & 0b00110011001100110011001100110011) << 02);
            n = ((n & 0b10101010101010101010101010101010) >> 01) | ((n & 0b01010101010101010101010101010101) << 01);
            return n;
        }

        /// <summary>
        /// 倒转 UInt64 的高低位
        /// </summary>
        public static unsafe ulong Bit_Reverse(this ulong n)
        {
            n = ((n & 0b1111111111111111111111111111111100000000000000000000000000000000) >> 32) | ((n & 0b0000000000000000000000000000000011111111111111111111111111111111) << 32);
            n = ((n & 0b1111111111111111000000000000000011111111111111110000000000000000) >> 16) | ((n & 0b0000000000000000111111111111111100000000000000001111111111111111) << 16);
            n = ((n & 0b1111111100000000111111110000000011111111000000001111111100000000) >> 08) | ((n & 0b0000000011111111000000001111111100000000111111110000000011111111) << 08);
            n = ((n & 0b1111000011110000111100001111000011110000111100001111000011110000) >> 04) | ((n & 0b0000111100001111000011110000111100001111000011110000111100001111) << 04);
            n = ((n & 0b1100110011001100110011001100110011001100110011001100110011001100) >> 02) | ((n & 0b0011001100110011001100110011001100110011001100110011001100110011) << 02);
            n = ((n & 0b1010101010101010101010101010101010101010101010101010101010101010) >> 01) | ((n & 0b0101010101010101010101010101010101010101010101010101010101010101) << 01);
            return n;
        }
    }
}